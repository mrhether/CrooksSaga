<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// init

anchorX = 0; 
anchorY = 0; 
focusY = -1000; 

// specific to backgrounds - where backgrounds lie on the z axis
backPos[0] = focusY; // inline with player - will appear static
//backPos[1] = focusY+100;  
//backPos[2] = focusY+200;  



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update parallax element positions

with (obj_parallax_element) { 
    /// update position
    drawX = x + scr_triangle_find_side_similar(obj_parallax_handler.anchorX,obj_parallax_handler.anchorY,parallaxDepth,view_xview,obj_parallax_handler.focusY); // if y2 = y1, then move normally (as if were regular object)
    drawY = y + scr_triangle_find_side_similar(obj_parallax_handler.anchorX,obj_parallax_handler.anchorY,parallaxDepth,view_yview,obj_parallax_handler.focusY);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update background positions

/// The step event is handled after the drawing of backgrounds, so any manipulation of background coordinates we perform in the step event won't apply to the background render until a step later.
/// This makes the backgrounds look like they're lagging in their update. 
/// Executing the following code in the 'Draw Begin' event ensures that the coordinates of the background are updated before the background is drawn, eliminating our lag problem.

for (var i = 0; i &lt; array_length_1d(backPos); i++) { 
    background_x[i] = scr_triangle_find_side_similar(anchorX,anchorY,focusY,view_xview,backPos[i]); // setting destinationY to focusY means background is inline with the plane on which camera is focused - it's inline with the player, and therefore travels with it, appearing static. Changing destinationY will cause the background to move out of sync with the view.
    background_y[i] = scr_triangle_find_side_similar(anchorX,anchorY,focusY,view_yview,backPos[i]);
}

// the simpler way of rendering a static background is to just set the x and y coordinates to view_xview and view_yview
// background_x[0] = view_xview; 
// background_y[0] = view_yview; 


// debug:
//show_debug_message("step: "+string(background_x[0] - xlast)); 
//show_debug_message(view_xview-(scr_triangle_find_side_similar(anchorX,anchorY,focusY,view_xview,focusY))); 
//xlast = background_x[0]; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
