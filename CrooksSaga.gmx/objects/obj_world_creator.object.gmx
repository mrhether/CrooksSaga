<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_default</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Mountains = 0

// End Height
end_height[0] = 0
end_height[1] = 0
end_height[2] = 0


randomize()

var tempGround = create_ground(-1);
end_height[0] = tempGround[| (ds_list_size(tempGround)-1)];
var decal_sprite = create_ground_auora(tempGround);
ground_sprites[0] = create_ground_sprite(tempGround);
var solidGroundObject = instance_create(x,y,obj_ground);
solidGroundObject.sprite_index = ground_sprites[0];
solidGroundObject.decal = decal_sprite;
ds_list_destroy(tempGround);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var index = ceil(view_xview/sprite_width);
if (array_length_1d(ground_sprites) &lt;= index) {

    var startX = index*sprite_width;

    var tempGround = create_ground(end_height[0]);
    end_height[0] = tempGround[| (ds_list_size(tempGround)-1)];
    
    var decal_sprite = create_ground_auora(tempGround);
    ground_sprites[index] = create_ground_sprite(tempGround); 
     
    var solidGroundObject = instance_create(index*sprite_width,y,obj_ground);
    solidGroundObject.sprite_index = ground_sprites[index];
    solidGroundObject.decal = decal_sprite;
    ds_list_destroy(tempGround);
    
    if (percent_chance(10)) {
        create_camp((index+0.5)*sprite_width, 0, irandom_range(1,3));
    } else if (percent_chance(50)) {
        create_village((index+0.5)*sprite_width, 0, irandom_range(1,5));
    }
    
    repeat(irandom(10)) {
        with instance_create(startX + irandom(sprite_width), 0, obj_tree) {
            image_xscale = choose(-1,1)
        }
    }
    
    repeat(irandom(Mountains)) {
        if (percent_chance(30)) {
            var mountainDepth = choose(50,200)//irandom(300)
            var mountain = instance_create(startX + irandom(sprite_width), room_height+150-mountainDepth, obj_mountain_2);
            mountain.depth = 100 + mountainDepth ; 
        }
    }
    
    var dGround = create_ground_object(index * sprite_width , y - 40, 150, 1)
    repeat(irandom(15)) {
        with (instance_create_worldO(startX + irandom(sprite_width), 0, obj_tree, dGround)) {
            depth = 150
            image_xscale = 0.8
            image_yscale = 0.8
            y--
        }
    }
    var dGround = create_ground_object(index * sprite_width , y - 80, 300, 2)
    repeat(irandom(50)) {
        with (instance_create_worldO(startX + irandom(sprite_width), 0, obj_tree, dGround)) {
            depth = 300
            image_xscale = 0.4
            image_yscale = 0.4
            y-=2
        }
    }
}





</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_xview+=10




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//view_xview-=10




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
